name: Build iOS NDLL for extension-orientation

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-ndll:
    runs-on: macos-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout
      uses: actions/checkout@main
        
    - name: Setup Haxe
      uses: krdlab/setup-haxe@master
      with:
        haxe-version: 4.3.6
        
    - name: Install dependencies
      run: |
        # 安装基础工具
        brew install pkg-config
        
        # 安装 Haxe 库
        haxelib install hxcpp
        haxelib install lime
        haxelib run lime setup
        
        # 安装 iOS 编译工具
        sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
        sudo xcodebuild -license accept
        
    - name: Configure environment
      run: |
        # 创建必要的符号链接
        mkdir -p include
        cd include
        ln -s /usr/local/include/SDL2 SDL2 || true
        
        # 设置环境变量
        echo "HXCPP=/Users/runner/haxe/lib/hxcpp/git/bin" >> $GITHUB_ENV
        echo "SDKROOT=$(xcrun --sdk iphoneos --show-sdk-path)" >> $GITHUB_ENV
        
    - name: Build modern NDLL (device)
      run: |
        cd project
        haxelib run hxcpp Build.xml -Dios -DHXCPP_ARM64 -DHXCPP_CPP11
        
    - name: Build modern NDLL (simulator)
      run: |
        cd project
        haxelib run hxcpp Build.xml -Dios -DHXCPP_X86 -Dsimulator
        
    - name: Build legacy NDLL (device)
      run: |
        cd project
        haxelib run hxcpp Build.xml -Dios -DHXCPP_ARM64 -DHXCPP_CPP11 -Dlegacy
        
    - name: Build legacy NDLL (simulator)
      run: |
        cd project
        haxelib run hxcpp Build.xml -Dios -DHXCPP_X86 -Dsimulator -Dlegacy
        
    - name: Verify artifacts
      run: |
        ls -la ndll/iPhone/
        echo "Artifacts:"
        find ndll -name '*.a'
        
    - name: Upload Artifact
      uses: actions/upload-artifact@main
      with:
        name: ndll-binaries
        path: ndll
        if-no-files-found: error
